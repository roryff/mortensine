const io = require ('../bin/www');
const {db, storage} = require ('./firebase');



db.collection('Innlogginger').orderBy('tid', 'desc').limit(1).onSnapshot((snapshot) => {
    snapshot.docChanges().forEach((change) => {
        if (change.type === 'added' || change.type === 'modified') {
            const loginData = change.doc.data();

            db.collection('brukere').doc(loginData.userID).get().then(doc => {
                const userData = doc.data();
                const profilbildePath = userData.profilbilde;
                console.log(profilbildePath);
                const userStatus = userData.status;
                
                                    // Only update the status field of the user's document if it's not already true
                if (userStatus!=loginData.status) {
                    db.collection('brukere').doc(loginData.userID).update({
                        status: loginData.status
                    });
                    if (loginData.status) {
                        db.collection('brukere').doc(loginData.userID).update({
                        timeEntered: new Date()
                    });
                    }
                }

                if (loginData.status) {
                    const data = {
                        type: 'welcome',
                        fornavn: userData.fornavn,
                        metode: loginData.metode,
                        sted: loginData.sted,
                        profilbilde: userData.profilbilde
                    };
                    io.sockets.emit('message', data);
                }
                else {
                    const data = {
                        type: 'goodbye',
                        userID: loginData.userID,
                        profilbilde: userData.profilbilde,
                        fornavn: userData.fornavn
                    };
                    io.sockets.emit('message', data);
                    console.log('Bruker har stemplet ut');
                }
      
            }).catch(error => {
                console.error("Feil ved Ã¥ hente bruker: ", error);
            });
            
        }
    });
});


var leaderboardData= null;

function updateLeaderboard(socket){
    const today = new Date();
    today.setHours(5, 0, 0, 0);

    db.collection('brukere')
    .orderBy('totalMinutes', 'desc')
    .limit(50)
    .get()
    .then((querySnapshot) => {
        const promises = querySnapshot.docs.map((doc) => {
            const userData = doc.data() || {};
            const userID = doc.id;

            return db.collection('Innlogginger')
            .where('userID', '==', userID)
            .where('tid', '>=', today)
            .orderBy('tid')
            .get()
            .then((innloggingerSnapshot) => {
                let totalMinutesToday = 0;
                let punchInTime = null;

                innloggingerSnapshot.forEach((innloggingerDoc) => {
                    const innloggingerData = innloggingerDoc.data();
                    const tid = innloggingerData.tid.toDate();
                    const status = innloggingerData.status;

                    if (status && !punchInTime) {
                        punchInTime = tid;
                    } else if (!status && punchInTime) {
                        const minutesWorked = (tid.getTime() - punchInTime.getTime()) / 60000;
                        totalMinutesToday += minutesWorked;
                        punchInTime = null;
                    }
                });

                if (punchInTime) {
                    const minutesWorked = (new Date().getTime() - punchInTime.getTime()) / 60000;
                    totalMinutesToday += minutesWorked;
                }

                const totalHoursToday = totalMinutesToday / 60;
                userData.totalHoursToday = totalHoursToday;

                return userData;
            });
        });

        Promise.all(promises).then((usersData) => {
            
            const data = {
                type: 'leaderboard',
                userData: usersData
            };
            leaderboardData=data;
            
            if (socket){
                socket.emit('leaderboard', data);
            }
            else {
                io.sockets.emit('leaderboard', data);
            }
        });

    })
    .catch((error) => { console.error("Error getting leaderboard entries: ", error); });
}
io.sockets.on('connection', (socket) =>{
    console.log('A user connected');
    if (leaderboardData){
        socket.emit('message', leaderboardData);
    }
    else {
        updateLeaderboard(socket);
    }
});
setInterval(updateLeaderboard, 60000);